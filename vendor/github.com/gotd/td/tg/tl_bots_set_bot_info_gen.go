// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BotsSetBotInfoRequest represents TL type `bots.setBotInfo#a365df7a`.
//
// See https://core.telegram.org/method/bots.setBotInfo for reference.
type BotsSetBotInfoRequest struct {
	// Flags field of BotsSetBotInfoRequest.
	Flags bin.Fields
	// LangCode field of BotsSetBotInfoRequest.
	LangCode string
	// About field of BotsSetBotInfoRequest.
	//
	// Use SetAbout and GetAbout helpers.
	About string
	// Description field of BotsSetBotInfoRequest.
	//
	// Use SetDescription and GetDescription helpers.
	Description string
}

// BotsSetBotInfoRequestTypeID is TL type id of BotsSetBotInfoRequest.
const BotsSetBotInfoRequestTypeID = 0xa365df7a

// Ensuring interfaces in compile-time for BotsSetBotInfoRequest.
var (
	_ bin.Encoder     = &BotsSetBotInfoRequest{}
	_ bin.Decoder     = &BotsSetBotInfoRequest{}
	_ bin.BareEncoder = &BotsSetBotInfoRequest{}
	_ bin.BareDecoder = &BotsSetBotInfoRequest{}
)

func (s *BotsSetBotInfoRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Flags.Zero()) {
		return false
	}
	if !(s.LangCode == "") {
		return false
	}
	if !(s.About == "") {
		return false
	}
	if !(s.Description == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *BotsSetBotInfoRequest) String() string {
	if s == nil {
		return "BotsSetBotInfoRequest(nil)"
	}
	type Alias BotsSetBotInfoRequest
	return fmt.Sprintf("BotsSetBotInfoRequest%+v", Alias(*s))
}

// FillFrom fills BotsSetBotInfoRequest from given interface.
func (s *BotsSetBotInfoRequest) FillFrom(from interface {
	GetLangCode() (value string)
	GetAbout() (value string, ok bool)
	GetDescription() (value string, ok bool)
}) {
	s.LangCode = from.GetLangCode()
	if val, ok := from.GetAbout(); ok {
		s.About = val
	}

	if val, ok := from.GetDescription(); ok {
		s.Description = val
	}

}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BotsSetBotInfoRequest) TypeID() uint32 {
	return BotsSetBotInfoRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*BotsSetBotInfoRequest) TypeName() string {
	return "bots.setBotInfo"
}

// TypeInfo returns info about TL type.
func (s *BotsSetBotInfoRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "bots.setBotInfo",
		ID:   BotsSetBotInfoRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "LangCode",
			SchemaName: "lang_code",
		},
		{
			Name:       "About",
			SchemaName: "about",
			Null:       !s.Flags.Has(0),
		},
		{
			Name:       "Description",
			SchemaName: "description",
			Null:       !s.Flags.Has(1),
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (s *BotsSetBotInfoRequest) SetFlags() {
	if !(s.About == "") {
		s.Flags.Set(0)
	}
	if !(s.Description == "") {
		s.Flags.Set(1)
	}
}

// Encode implements bin.Encoder.
func (s *BotsSetBotInfoRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotInfo#a365df7a as nil")
	}
	b.PutID(BotsSetBotInfoRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *BotsSetBotInfoRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode bots.setBotInfo#a365df7a as nil")
	}
	s.SetFlags()
	if err := s.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode bots.setBotInfo#a365df7a: field flags: %w", err)
	}
	b.PutString(s.LangCode)
	if s.Flags.Has(0) {
		b.PutString(s.About)
	}
	if s.Flags.Has(1) {
		b.PutString(s.Description)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *BotsSetBotInfoRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotInfo#a365df7a to nil")
	}
	if err := b.ConsumeID(BotsSetBotInfoRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode bots.setBotInfo#a365df7a: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *BotsSetBotInfoRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode bots.setBotInfo#a365df7a to nil")
	}
	{
		if err := s.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode bots.setBotInfo#a365df7a: field flags: %w", err)
		}
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode bots.setBotInfo#a365df7a: field lang_code: %w", err)
		}
		s.LangCode = value
	}
	if s.Flags.Has(0) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode bots.setBotInfo#a365df7a: field about: %w", err)
		}
		s.About = value
	}
	if s.Flags.Has(1) {
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode bots.setBotInfo#a365df7a: field description: %w", err)
		}
		s.Description = value
	}
	return nil
}

// GetLangCode returns value of LangCode field.
func (s *BotsSetBotInfoRequest) GetLangCode() (value string) {
	if s == nil {
		return
	}
	return s.LangCode
}

// SetAbout sets value of About conditional field.
func (s *BotsSetBotInfoRequest) SetAbout(value string) {
	s.Flags.Set(0)
	s.About = value
}

// GetAbout returns value of About conditional field and
// boolean which is true if field was set.
func (s *BotsSetBotInfoRequest) GetAbout() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(0) {
		return value, false
	}
	return s.About, true
}

// SetDescription sets value of Description conditional field.
func (s *BotsSetBotInfoRequest) SetDescription(value string) {
	s.Flags.Set(1)
	s.Description = value
}

// GetDescription returns value of Description conditional field and
// boolean which is true if field was set.
func (s *BotsSetBotInfoRequest) GetDescription() (value string, ok bool) {
	if s == nil {
		return
	}
	if !s.Flags.Has(1) {
		return value, false
	}
	return s.Description, true
}

// BotsSetBotInfo invokes method bots.setBotInfo#a365df7a returning error if any.
//
// See https://core.telegram.org/method/bots.setBotInfo for reference.
func (c *Client) BotsSetBotInfo(ctx context.Context, request *BotsSetBotInfoRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
